{"version":3,"sources":["sudo.js"],"names":[],"mappings":"AAAA;;AAEA,UAAU,OAAO,OAAP,GAAiB,IAA3B;;AAEA,IAAI,QAAQ,QAAQ,eAAR,EAAyB,KAArC;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,aAAa,QAAQ,QAAR,EAAkB,IAAnC;AACA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA,IAAI,OAAO,QAAQ,GAAR,CAAY,MAAZ,EAAoB,KAApB,CAA0B,GAA1B,CAAX;AACA,IAAI,UAAU,WAAW,MAAX,EAAmB,IAAnB,CAAd;;AAEA,IAAI,cAAJ;AACA,IAAI,UAAJ;;AAEA,SAAS,IAAT,CAAc,OAAd,EAAuB,OAAvB,EAAgC;AAC5B,QAAI,SAAS,oBAAb;AACA,QAAI,UAAU,CAAd;;AAEA,QAAI,OAAO,CAAE,IAAF,EAAQ,IAAR,EAAc,MAAd,CAAX;AACA,SAAK,IAAL,CAAU,KAAV,CAAgB,IAAhB,EAAsB,OAAtB;;;AAGA,QAAI,MAAM,QAAQ,MAAR,CAAe,UAAU,CAAV,EAAa;AAAE,eAAO,EAAE,OAAF,CAAU,GAAV,MAAmB,CAA1B;AAA8B,KAA5D,EAA8D,CAA9D,CAAV;;AAEA,QAAI,UAAU,WAAW,EAAzB;AACA,QAAI,eAAe,QAAQ,YAAR,IAAwB,EAA3C;AACA,iBAAa,KAAb,GAAqB,MAArB;;AAEA,QAAI,QAAQ,MAAM,OAAN,EAAe,IAAf,EAAqB,YAArB,CAAZ;;;AAGA,aAAS,cAAT,CAAwB,GAAxB,EAA6B,GAA7B,EAAkC;AAC9B,YAAI,GAAJ,EAAS;AACL,kBAAM,IAAI,KAAJ,CAAU,qBAAqB,GAA/B,CAAN;AACH;;AAED,YAAI,OAAO,MAAM,QAAN,KAAmB,IAA9B,EAAoC;AAChC,kBAAM,IAAN,CAAW,SAAX;AACH,SAFD,MAEO;AACH,uBAAW,YAAY;AACnB,sBAAM,GAAN,EAAW,cAAX;AACH,aAFD,EAEG,GAFH;AAGH;AACJ;AACD,UAAM,GAAN,EAAW,cAAX;;;AAGA,UAAM,MAAN,CAAa,EAAb,CAAgB,MAAhB,EAAwB,UAAU,IAAV,EAAgB;AACpC,YAAI,QAAQ,KAAK,QAAL,GAAgB,IAAhB,GAAuB,KAAvB,CAA6B,IAA7B,CAAZ;AACA,cAAM,OAAN,CAAc,UAAU,IAAV,EAAgB;AAC1B,gBAAI,SAAS,MAAb,EAAqB;AACjB,oBAAI,EAAE,OAAF,GAAY,CAAhB,EAAmB;;AAEf,qCAAiB,IAAjB;AACH;;AAED,oBAAI,QAAQ,aAAR,IAAyB,cAA7B,EAA6C;AACzC,0BAAM,KAAN,CAAY,KAAZ,CAAkB,iBAAiB,IAAnC;AACH,iBAFD,MAEO;AACH,yBAAK,EAAE,QAAQ,QAAQ,MAAR,IAAkB,+BAA5B,EAA6D,QAAQ,IAArE,EAAL,EAAkF,UAAU,KAAV,EAAiB,MAAjB,EAAyB;AACvG,8BAAM,KAAN,CAAY,KAAZ,CAAkB,SAAS,IAA3B;AACA,4BAAI,QAAQ,aAAZ,EAA2B;AACvB,6CAAiB,MAAjB;AACH;AACJ,qBALD;AAMH;AACJ;AACJ,SAlBD;AAmBH,KArBD;;AAuBA,WAAO,KAAP;AACH","file":"sudo-compiled.js","sourcesContent":["\"use strict\";\n\nexports = module.exports = sudo;\n\nvar spawn = require('child_process').spawn;\nvar read = require('read');\nvar inpathSync = require('inpath').sync;\nvar pidof = require('pidof');\n\nvar path = process.env['PATH'].split(':');\nvar sudoBin = inpathSync('sudo', path);\n\nvar cachedPassword;\nvar lastAnswer;\n\nfunction sudo(command, options) {\n    var prompt = '#node-sudo-passwd#';\n    var prompts = 0;\n\n    var args = [ '-S', '-p', prompt ];\n    args.push.apply(args, command);\n\n    // The binary is the first non-dashed parameter to sudo\n    var bin = command.filter(function (i) { return i.indexOf('-') !== 0; })[0];\n\n    var options = options || {};\n    var spawnOptions = options.spawnOptions || {};\n    spawnOptions.stdio = 'pipe';\n\n    var child = spawn(sudoBin, args, spawnOptions);\n\n    // Wait for the sudo:d binary to start up\n    function waitForStartup(err, pid) {\n        if (err) {\n            throw new Error('Couldn\\'t start ' + bin);\n        }\n\n        if (pid || child.exitCode !== null) {\n            child.emit('started');\n        } else {\n            setTimeout(function () {\n                pidof(bin, waitForStartup);\n            }, 100);\n        }\n    }\n    pidof(bin, waitForStartup);\n\n    // FIXME: Remove this handler when the child has successfully started\n    child.stderr.on('data', function (data) {\n        var lines = data.toString().trim().split('\\n');\n        lines.forEach(function (line) {\n            if (line === prompt) {\n                if (++prompts > 1) {\n                    // The previous entry must have been incorrect, since sudo asks again.\n                    cachedPassword = null;\n                }\n\n                if (options.cachePassword && cachedPassword) {\n                    child.stdin.write(cachedPassword + '\\n');\n                } else {\n                    read({ prompt: options.prompt || 'sudo requires your password: ', silent: true }, function (error, answer) {\n                        child.stdin.write(answer + '\\n');\n                        if (options.cachePassword) {\n                            cachedPassword = answer;\n                        }\n                    });\n                }\n            }\n        });\n    });\n\n    return child;\n}\n"]}